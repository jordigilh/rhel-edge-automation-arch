- name: Verify Blueprint Source Directory is Defined
  ansible.builtin.assert:
    fail_msg: Blueprints Source Directory Must be Defined
    that:
      - blueprint_source_dir is defined

- name: Validate Blueprint Directory and Blueprint File Exists
  ansible.builtin.stat:
    path: "{{ item }}"
  become: no
  delegate_to: localhost
  failed_when: not blueprint_exists.stat.exists
  loop:
    - "{{ blueprint_source_dir }}"
    - "{{ blueprint_source_dir }}/blueprint.toml"
  register: blueprint_exists

- name: Create Blueprints Directory
  ansible.builtin.file:
    path: "{{ base_rpm_ostree_blueprints_dir }}"
    state: directory

- name: Set Blueprint Facts
  ansible.builtin.set_fact:
    blueprint_name: "{{ blueprint_source_dir | basename }}"
    build_blueprint_dir: "{{ base_rpm_ostree_blueprints_dir }}/{{ blueprint_source_dir | basename }}"

- name: Copy Blueprints Directory to Image Builder
  ansible.builtin.copy:
    dest: "{{ build_blueprint_dir }}/"
    src: "{{ blueprint_source_dir }}/"

- name: Push Blueprint to Server
  ansible.builtin.command: >
    composer-cli blueprints push "{{ build_blueprint_dir }}/blueprint.toml"

- name: Resolve Dependencies
  ansible.builtin.command: >
    composer-cli blueprints depsolve {{ blueprint_name }}

- name: Freeze Blueprint
  ansible.builtin.command: >
    composer-cli -j blueprints freeze {{ blueprint_name }}
  register: frozen_blueprint

- name: Set Blueprint Version Number
  ansible.builtin.set_fact:
    blueprint_version: "{{ (frozen_blueprint.stdout | from_json).body.blueprints[0].blueprint.version }}"

- name: Define Image Type
  set_fact:
    image_type: "{{ 'edge-container' if ansible_distribution == 'RedHat' else 'iot-container' if ansible_distribution == 'Fedora' }}"
- name: Output image type
  debug:
    msg: Image type is {{ image_type }} 
- name: Compose Image
  command: >
    composer-cli compose start-ostree {{ blueprint_name}} {{ image_type }}
  register: build_commit_id

- name: Wait for Image Build to Complete
  ansible.builtin.command: >
    composer-cli -j compose status
  changed_when: false
  delay: 30
  failed_when: >
    (image_build_status.stdout | from_json | selectattr('id', 'equalto', build_commit_id) | list | first).queue_status != "FINISHED"
  register: image_build_status
  retries: 200
  until: >
    (image_build_status.stdout | from_json | selectattr('id', 'equalto', build_commit_id) | list | first).queue_status == "FINISHED"

- name: Save Build Commit ID to File
  ansible.builtin.copy:
    content: "{{ build_commit_id }}"
    dest: "{{ build_commit_output_file }}"
  become: no
  delegate_to: localhost
